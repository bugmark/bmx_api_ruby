=begin
#Bugmark API

#all calls require BASIC AUTH

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'date'

module BmxApiRuby
  # Show host object counts: number of users, offers, contracts, etc. 
  class HostCount
    # Bugmark Hostname
    attr_accessor :host_name

    # System Time
    attr_accessor :host_time

    # Number of Users
    attr_accessor :num_users

    # Number of Repos
    attr_accessor :num_repos

    # Number of Issues
    attr_accessor :num_issues

    # Number of Offers to Buy Fixed
    attr_accessor :bu_offers

    # Number of Offers to Buy Unfixed
    attr_accessor :bf_offers

    # Number of Contracts
    attr_accessor :contracts

    # Number of Positions
    attr_accessor :positions

    # Number of Escrows
    attr_accessor :escrows

    # Number of Amendments
    attr_accessor :amendments


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'host_name' => :'host_name',
        :'host_time' => :'host_time',
        :'num_users' => :'num_users',
        :'num_repos' => :'num_repos',
        :'num_issues' => :'num_issues',
        :'bu_offers' => :'bu_offers',
        :'bf_offers' => :'bf_offers',
        :'contracts' => :'contracts',
        :'positions' => :'positions',
        :'escrows' => :'escrows',
        :'amendments' => :'amendments'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'host_name' => :'String',
        :'host_time' => :'String',
        :'num_users' => :'Integer',
        :'num_repos' => :'Integer',
        :'num_issues' => :'Integer',
        :'bu_offers' => :'Integer',
        :'bf_offers' => :'Integer',
        :'contracts' => :'Integer',
        :'positions' => :'Integer',
        :'escrows' => :'Integer',
        :'amendments' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.has_key?(:'host_time')
        self.host_time = attributes[:'host_time']
      end

      if attributes.has_key?(:'num_users')
        self.num_users = attributes[:'num_users']
      end

      if attributes.has_key?(:'num_repos')
        self.num_repos = attributes[:'num_repos']
      end

      if attributes.has_key?(:'num_issues')
        self.num_issues = attributes[:'num_issues']
      end

      if attributes.has_key?(:'bu_offers')
        self.bu_offers = attributes[:'bu_offers']
      end

      if attributes.has_key?(:'bf_offers')
        self.bf_offers = attributes[:'bf_offers']
      end

      if attributes.has_key?(:'contracts')
        self.contracts = attributes[:'contracts']
      end

      if attributes.has_key?(:'positions')
        self.positions = attributes[:'positions']
      end

      if attributes.has_key?(:'escrows')
        self.escrows = attributes[:'escrows']
      end

      if attributes.has_key?(:'amendments')
        self.amendments = attributes[:'amendments']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          host_name == o.host_name &&
          host_time == o.host_time &&
          num_users == o.num_users &&
          num_repos == o.num_repos &&
          num_issues == o.num_issues &&
          bu_offers == o.bu_offers &&
          bf_offers == o.bf_offers &&
          contracts == o.contracts &&
          positions == o.positions &&
          escrows == o.escrows &&
          amendments == o.amendments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [host_name, host_time, num_users, num_repos, num_issues, bu_offers, bf_offers, contracts, positions, escrows, amendments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BmxApiRuby.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
