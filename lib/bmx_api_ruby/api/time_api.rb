=begin
#Bugmark API

#all calls require BASIC AUTH

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module BmxApiRuby
  class TimeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # day offset
    # day offset
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_time_day_offset(opts = {})
      get_time_day_offset_with_http_info(opts)
      return nil
    end

    # day offset
    # day offset
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_time_day_offset_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TimeApi.get_time_day_offset ..."
      end
      # resource path
      local_var_path = "/time/day_offset"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeApi#get_time_day_offset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # future week-ends
    # future week-ends
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count (default 4)
    # @return [nil]
    def get_time_future_week_ends(opts = {})
      get_time_future_week_ends_with_http_info(opts)
      return nil
    end

    # future week-ends
    # future week-ends
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count (default 4)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_time_future_week_ends_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TimeApi.get_time_future_week_ends ..."
      end
      # resource path
      local_var_path = "/time/future_week_ends"

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeApi#get_time_future_week_ends\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # current exchange time
    # current exchange time
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_time_now(opts = {})
      get_time_now_with_http_info(opts)
      return nil
    end

    # current exchange time
    # current exchange time
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_time_now_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TimeApi.get_time_now ..."
      end
      # resource path
      local_var_path = "/time/now"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeApi#get_time_now\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # system rebuild real-time
    # system rebuild real-time
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_time_rebuild_date(opts = {})
      get_time_rebuild_date_with_http_info(opts)
      return nil
    end

    # system rebuild real-time
    # system rebuild real-time
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_time_rebuild_date_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TimeApi.get_time_rebuild_date ..."
      end
      # resource path
      local_var_path = "/time/rebuild_date"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeApi#get_time_rebuild_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # increment day offset
    # increment day offset
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count (default 1)
    # @return [Status]
    def put_time_increment_day_offset(opts = {})
      data, _status_code, _headers = put_time_increment_day_offset_with_http_info(opts)
      return data
    end

    # increment day offset
    # increment day offset
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count (default 1)
    # @return [Array<(Status, Fixnum, Hash)>] Status data, response status code and response headers
    def put_time_increment_day_offset_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TimeApi.put_time_increment_day_offset ..."
      end
      # resource path
      local_var_path = "/time/increment_day_offset"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["count"] = opts[:'count'] if !opts[:'count'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Status')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeApi#put_time_increment_day_offset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
