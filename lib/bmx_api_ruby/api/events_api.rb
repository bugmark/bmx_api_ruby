=begin
#Bugmark API

#all calls require BASIC AUTH

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module BmxApiRuby
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Return events
    # Return events
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :after &lt;cursor&gt; an event-ID
    # @return [Array<Event>]
    def get_events(opts = {})
      data, _status_code, _headers = get_events_with_http_info(opts)
      return data
    end

    # Return events
    # Return events
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :after &lt;cursor&gt; an event-ID
    # @return [Array<(Array<Event>, Fixnum, Hash)>] Array<Event> data, response status code and response headers
    def get_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.get_events ..."
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Event>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show event record
    # Show event record
    # @param event_uuid 
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def get_events_event_uuid(event_uuid, opts = {})
      data, _status_code, _headers = get_events_event_uuid_with_http_info(event_uuid, opts)
      return data
    end

    # Show event record
    # Show event record
    # @param event_uuid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Fixnum, Hash)>] Event data, response status code and response headers
    def get_events_event_uuid_with_http_info(event_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.get_events_event_uuid ..."
      end
      # verify the required parameter 'event_uuid' is set
      if @api_client.config.client_side_validation && event_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'event_uuid' when calling EventsApi.get_events_event_uuid"
      end
      # resource path
      local_var_path = "/events/{event_uuid}".sub('{' + 'event_uuid' + '}', event_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Event')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_events_event_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an event
    # Update an event
    # @param id 
    # @param etherscan_url 
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def put_events(id, etherscan_url, opts = {})
      data, _status_code, _headers = put_events_with_http_info(id, etherscan_url, opts)
      return data
    end

    # Update an event
    # Update an event
    # @param id 
    # @param etherscan_url 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Fixnum, Hash)>] Event data, response status code and response headers
    def put_events_with_http_info(id, etherscan_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.put_events ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.put_events"
      end
      # verify the required parameter 'etherscan_url' is set
      if @api_client.config.client_side_validation && etherscan_url.nil?
        fail ArgumentError, "Missing the required parameter 'etherscan_url' when calling EventsApi.put_events"
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["id"] = id
      form_params["etherscan_url"] = etherscan_url

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Event')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#put_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
