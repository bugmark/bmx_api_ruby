=begin
#Bugmark API

#all calls require BASIC AUTH

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module BmxApiRuby
  class TrackersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List all tracker ids
    # List all tracker ids
    # @param [Hash] opts the optional parameters
    # @return [Array<TrackerIds>]
    def get_trackers(opts = {})
      data, _status_code, _headers = get_trackers_with_http_info(opts)
      return data
    end

    # List all tracker ids
    # List all tracker ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrackerIds>, Fixnum, Hash)>] Array<TrackerIds> data, response status code and response headers
    def get_trackers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackersApi.get_trackers ..."
      end
      # resource path
      local_var_path = "/trackers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrackerIds>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackersApi#get_trackers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all tracker details
    # List all tracker details
    # @param [Hash] opts the optional parameters
    # @return [Array<TrackerDetail>]
    def get_trackers_detail(opts = {})
      data, _status_code, _headers = get_trackers_detail_with_http_info(opts)
      return data
    end

    # List all tracker details
    # List all tracker details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrackerDetail>, Fixnum, Hash)>] Array<TrackerDetail> data, response status code and response headers
    def get_trackers_detail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackersApi.get_trackers_detail ..."
      end
      # resource path
      local_var_path = "/trackers/detail"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrackerDetail>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackersApi#get_trackers_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show detail for one tracker
    # Show detail for one tracker
    # @param uuid tracker UUID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :issues include issues
    # @return [TrackerDetail]
    def get_trackers_uuid(uuid, opts = {})
      data, _status_code, _headers = get_trackers_uuid_with_http_info(uuid, opts)
      return data
    end

    # Show detail for one tracker
    # Show detail for one tracker
    # @param uuid tracker UUID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :issues include issues
    # @return [Array<(TrackerDetail, Fixnum, Hash)>] TrackerDetail data, response status code and response headers
    def get_trackers_uuid_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackersApi.get_trackers_uuid ..."
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TrackersApi.get_trackers_uuid"
      end
      # resource path
      local_var_path = "/trackers/{uuid}".sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'issues'] = opts[:'issues'] if !opts[:'issues'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackerDetail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackersApi#get_trackers_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a tracker
    # Create a GitHub tracker. 
    # @param type tracker type
    # @param name tracker name
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ghsync GH sync on create
    # @return [TrackerIds]
    def post_trackers(type, name, opts = {})
      data, _status_code, _headers = post_trackers_with_http_info(type, name, opts)
      return data
    end

    # Create a tracker
    # Create a GitHub tracker. 
    # @param type tracker type
    # @param name tracker name
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ghsync GH sync on create
    # @return [Array<(TrackerIds, Fixnum, Hash)>] TrackerIds data, response status code and response headers
    def post_trackers_with_http_info(type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackersApi.post_trackers ..."
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling TrackersApi.post_trackers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['GitHub', 'Test'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of GitHub, Test"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TrackersApi.post_trackers"
      end
      # resource path
      local_var_path = "/trackers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["type"] = type
      form_params["name"] = name
      form_params["ghsync"] = opts[:'ghsync'] if !opts[:'ghsync'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackerIds')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackersApi#post_trackers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync a tracker
    # Sync a GitHub tracker. 
    # @param uuid tracker uuid
    # @param [Hash] opts the optional parameters
    # @return [Status]
    def put_trackers(uuid, opts = {})
      data, _status_code, _headers = put_trackers_with_http_info(uuid, opts)
      return data
    end

    # Sync a tracker
    # Sync a GitHub tracker. 
    # @param uuid tracker uuid
    # @param [Hash] opts the optional parameters
    # @return [Array<(Status, Fixnum, Hash)>] Status data, response status code and response headers
    def put_trackers_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackersApi.put_trackers ..."
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TrackersApi.put_trackers"
      end
      # resource path
      local_var_path = "/trackers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["uuid"] = uuid

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Status')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackersApi#put_trackers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
