=begin
#Bugmark API

#all calls require BASIC AUTH

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module BmxApiRuby
  class ContractApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List all contracts
    # List all contracts
    # @param [Hash] opts the optional parameters
    # @return [Array<ContractOverview>]
    def get_contract(opts = {})
      data, _status_code, _headers = get_contract_with_http_info(opts)
      return data
    end

    # List all contracts
    # List all contracts
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContractOverview>, Fixnum, Hash)>] Array<ContractOverview> data, response status code and response headers
    def get_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContractApi.get_contract ..."
      end
      # resource path
      local_var_path = "/contract"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContractOverview>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractApi#get_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show contract detail
    # Show contract detail
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [ContractDetail]
    def get_contract_uuid(uuid, opts = {})
      data, _status_code, _headers = get_contract_uuid_with_http_info(uuid, opts)
      return data
    end

    # Show contract detail
    # Show contract detail
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContractDetail, Fixnum, Hash)>] ContractDetail data, response status code and response headers
    def get_contract_uuid_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContractApi.get_contract_uuid ..."
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ContractApi.get_contract_uuid"
      end
      # resource path
      local_var_path = "/contract/{uuid}".sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContractDetail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractApi#get_contract_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cross offer
    # Cross offer
    # @param commit_type expand, transfer or reduce
    # @param offer_uuid 
    # @param [Hash] opts the optional parameters
    # @return [Status]
    def post_contract_offer_uuid(commit_type, offer_uuid, opts = {})
      data, _status_code, _headers = post_contract_offer_uuid_with_http_info(commit_type, offer_uuid, opts)
      return data
    end

    # Cross offer
    # Cross offer
    # @param commit_type expand, transfer or reduce
    # @param offer_uuid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Status, Fixnum, Hash)>] Status data, response status code and response headers
    def post_contract_offer_uuid_with_http_info(commit_type, offer_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContractApi.post_contract_offer_uuid ..."
      end
      # verify the required parameter 'commit_type' is set
      if @api_client.config.client_side_validation && commit_type.nil?
        fail ArgumentError, "Missing the required parameter 'commit_type' when calling ContractApi.post_contract_offer_uuid"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['expand', 'transfer', 'reduce'].include?(commit_type)
        fail ArgumentError, "invalid value for 'commit_type', must be one of expand, transfer, reduce"
      end
      # verify the required parameter 'offer_uuid' is set
      if @api_client.config.client_side_validation && offer_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'offer_uuid' when calling ContractApi.post_contract_offer_uuid"
      end
      # resource path
      local_var_path = "/contract/{offer_uuid}".sub('{' + 'offer_uuid' + '}', offer_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["commit_type"] = commit_type

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Status')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractApi#post_contract_offer_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
