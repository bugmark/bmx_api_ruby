=begin
#Bugmark API

#all calls require BASIC AUTH

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module BmxApiRuby
  class ContractsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List all contracts
    # List all contracts
    # @param [Hash] opts the optional parameters
    # @return [Array<ContractOverview>]
    def get_contracts(opts = {})
      data, _status_code, _headers = get_contracts_with_http_info(opts)
      return data
    end

    # List all contracts
    # List all contracts
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContractOverview>, Fixnum, Hash)>] Array<ContractOverview> data, response status code and response headers
    def get_contracts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContractsApi.get_contracts ..."
      end
      # resource path
      local_var_path = "/contracts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContractOverview>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show contract detail
    # Show contract detail
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [ContractDetail]
    def get_contracts_uuid(uuid, opts = {})
      data, _status_code, _headers = get_contracts_uuid_with_http_info(uuid, opts)
      return data
    end

    # Show contract detail
    # Show contract detail
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContractDetail, Fixnum, Hash)>] ContractDetail data, response status code and response headers
    def get_contracts_uuid_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContractsApi.get_contracts_uuid ..."
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ContractsApi.get_contracts_uuid"
      end
      # resource path
      local_var_path = "/contracts/{uuid}".sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['base']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContractDetail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contracts_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
